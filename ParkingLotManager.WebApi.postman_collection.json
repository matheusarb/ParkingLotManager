{
	"info": {
		"_postman_id": "5854a2b8-1985-49cc-972f-de0b526c22a4",
		"name": "ParkingLotManager.WebApi",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "19856109"
	},
	"item": [
		{
			"name": "Vehicles",
			"item": [
				{
					"name": "GetAll",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/v1/vehicles"
					},
					"response": []
				},
				{
					"name": "GetByLicensePlate",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/vehicles/{license_plate}"
					},
					"response": []
				},
				{
					"name": "GetFordBrand",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/vehicles/ford"
					},
					"response": []
				},
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"licensePlate\": \"VCA2333\",\r\n    \"brand\": \"Ferrari\",\r\n    \"model\": \"F-50\",\r\n    \"color\": \"red\",\r\n    \"type\": 1,\r\n    \"companyName\": \"Parking Lot\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/vehicles"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"brand\": \"Cadillac\",\r\n    \"model\": \"CT 5\",\r\n    \"color\": \"Emerald\",\r\n    \"type\": 1,\r\n    \"companyName\": \"Parking Lot\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/vehicles/{license_plate}"
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/v1/vehicles/{license_plate}"
					},
					"response": []
				},
				{
					"name": "ReenteredAsyc",
					"request": {
						"method": "PUT",
						"header": [],
						"url": "{{base_URL}}/v1/vehicles/reentered/{license_plate}"
					},
					"response": []
				},
				{
					"name": "DepartureAsync",
					"request": {
						"method": "PUT",
						"header": [],
						"url": "{{base_URL}}/v1/vehicles/departure/{license_plate}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Companies",
			"item": [
				{
					"name": "GetAll",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/v1/companies"
					},
					"response": []
				},
				{
					"name": "GetByName",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/v1/companies/{company_name}"
					},
					"response": []
				},
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Parking Lot\",\r\n    \"cnpj\": {\r\n        \"cnpjNumber\": \"30873163999911\"\r\n    },\r\n    \"address\": {\r\n        \"street\": \"Park street\",\r\n        \"city\": \"Sao Paulo\",\r\n        \"zipCode\": \"40200123\"\r\n    },\r\n    \"telephone\": \"32287778888\",\r\n    \"carSlots\": 5,\r\n    \"motorcycleSlots\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/companies"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"cnpj\": {\r\n        \"cnpjNumber\": \"\"\r\n    },\r\n    \"address\": {\r\n        \"street\":\"\",\r\n        \"city\":\"\",\r\n        \"zipCode\": \"\"\r\n    },\r\n    \"telephone\": \"\",\r\n    \"carSlots\": 100,\r\n    \"motorcycleSlots\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/companies/{company_name}"
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/v1/companies/{company_name}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Login",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"superman@io.com\",\r\n    \"password\": \"$X*4krU02@Ywl}SJZfqvtWqHq\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/accounts/login"
					},
					"response": []
				},
				{
					"name": "GetUserById",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/v1/accounts/1005"
					},
					"response": []
				},
				{
					"name": "Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/v1/accounts"
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"batman@io.com\",\r\n    \"name\": \"Bruce Wayne\",\r\n    \"CompanyName\": \"Park4You\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/accounts"
					},
					"response": []
				},
				{
					"name": "CreateAdmin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"xavier@io.com\",\r\n    \"name\": \"Professor Xavier\",\r\n    \"CompanyName\": \"WellPark Inc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/accounts/admin"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"spider1234@io.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/v1/accounts/1005"
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/v1/accounts/2002"
					},
					"response": []
				}
			]
		},
		{
			"name": "Home",
			"item": [
				{
					"name": "StatusCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/home/status-check",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "ValidateApiKey",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/home/validate-api-key"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "GetAllRegisteredVehicles",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{ReportApi_URL}}/v1/report/entered-vehicles"
					},
					"response": []
				},
				{
					"name": "GetDeparturedVehicles",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{ReportApi_URL}}/v1/report/departured-vehicles"
					},
					"response": []
				},
				{
					"name": "GetRegisteredVehiclesLastHour",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{ReportApi_URL}}/v1/report/entered-vehiclesLH"
					},
					"response": []
				},
				{
					"name": "GetDeparturedVehiclesLastHour",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{ReportApi_URL}}/v1/report/departured-vehiclesLH"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"in": "query",
			"value": "{{apiKey}}",
			"key": "api_key"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "WebApi_URL",
			"value": "https://localhost:7255"
		},
		{
			"key": "apiKey",
			"value": "parking_oPt4oylWx0X4wfnj",
			"type": "string"
		},
		{
			"key": "ReportApi_URL",
			"value": "https://localhost:7010",
			"type": "string"
		}
	]
}